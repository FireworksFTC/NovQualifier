#pragma config(Hubs,  S1, HTMotor,  HTMotor,  none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S2,     IR,             sensorHiTechnicIRSeeker1200)
#pragma config(Sensor, S3,     TouchSensor,    sensorHiTechnicTouchMux)
#pragma config(Motor,  motorA,          ForkLift,      tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  motorB,          Hook,          tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  motorC,          Hitter,        tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  mtr_S1_C1_1,     RightDrive,    tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C1_2,     LeftDrive,     tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_1,     motorF,        tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_2,     motorG,        tmotorTetrix, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

void goForward(int goPower, const int mTime){
	motor[RightDrive] =  goPower;
	motor[LeftDrive] =  goPower;
	wait1Msec(mTime);
}

void goBack(int goPower, const int mTime) {
	motor[RightDrive] = -goPower;
	motor[LeftDrive] =  -goPower;
	wait1Msec(mTime);
}

void goLeft(int goPower, const int mTime) {
	motor[RightDrive] = -goPower;
	motor[LeftDrive] = goPower;
	wait1Msec(mTime);
}

void goRight(int goPower, const int mTime) {
	motor[RightDrive] = goPower;
	motor[LeftDrive] = - goPower;
	wait1Msec(mTime);
}

void goUp (int goPower, const int mTime) {
	motor[Hook] = goPower;
	wait1Msec(mTime);
}

void goDown (int goPower, const int mTime) {
	motor[Hook] = -goPower;
	wait1Msec(mTime);
}

void goGrab (int goPower, const int mTime) {
	motor[Hitter] = -goPower;
	wait1Msec(mTime);
}

void goRelease (int goPower, const int mTime) {
	motor[Hitter] = goPower;
	wait1Msec(mTime);
} 


void initializeRobot()
{
	return;
}




task main()
	{
	goBack(10, 1000);// going toward IR sensor
	wait1Msec(2000);// waiting
		if(SensorValue[IR] >= 4){// condition of checking value of IR sensor
			goForward(20, 600);// going away from center goal in order to kick kick-stand next
			goRight(20, 1150);// turning toward pole of kick-stand
			goBack(20, 1500);// kicking kick-stand
			goRight(20, 800);
			goForward(20, 800);//backing away so that pole does not get stuck in robot
			goRight(20, 1100);// turning in direction to get to goal
			goBack(20, 1200);// moving in above direction
			goLeft(20, 2100);// turning toward goal
			while(SensorValue[TouchSensor] == 0)// move until touches sensor
			{
				motor[RightDrive] = - 10;
				motor[LeftDrive] = - 10;
			}
			goDown(45, 450);// grab the goal
			goForward(10, 6500);// move towards parking lot
			goRight(40, 1200);// turn towards parking lot
			goForward(20, 5500);// move into parking lot

			//goForward(20, 100);
			//wait1Msec(2000);
		}
		else{// condition of checking value of IR senor
		goBack(10, 230);
		wait1Msec(850);
		goGrab(30, 250);// hook in poistion to grab the kick stand 
		goRight(30, 530);
		goRelease(50, 800);// grab kickstand
		goForward(100, 900);
		goLeft(30, 2700);
		goGrab(30, 500);// let go of kick stand
		goForward(30, 1500);
		goRight(30, 4000);//turning in direction to get to goal
		goBack(30, 500);//moving in above direction
		//goLeft(40, 950);//turning towards goal
		//while(SensorValue[TouchSensor] == 0)// move until touches sensor
		//{
		//	motor[RightDrive] = - 10;
		//	motor[LeftDrive] = - 10;
		//}
		//goDown(45, 450);// grab the goal
		//goForward(10, 6500);// move towards
		//goRight(40, 1400);// turn towards parking lot
		//goForward(20, 5500);// move into parking lot
		}
}
