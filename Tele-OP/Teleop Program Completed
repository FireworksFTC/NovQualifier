#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTServo,  none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Motor,  motorA,          Collector,     tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  mtr_S1_C1_1,     motorRight,    tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C1_2,     motorLeft,     tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_1,     Hook,          tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_2,     Forklift,      tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S1_C3_1,    Door,                 tServoStandard)
#pragma config(Servo,  srvo_S1_C3_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/////////////////////////////////////////////////////////////////////////////////////////////////////
//
//                           Tele-Operation Mode Code Template
//
// This file contains a template for simplified creation of an tele-op program for an FTC
// competition.
//
// You need to customize two functions with code unique to your specific robot.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////

#include "JoystickDriver.c"  //Include file to "handle" the Bluetooth messages.


/////////////////////////////////////////////////////////////////////////////////////////////////////
//
//                                    initializeRobot
//
// Prior to the start of tele-op mode, you may want to perform some initialization on your robot
// and the variables within your program.
//
// In most cases, you may not have to add any code to this function and it will remain "empty".
//
/////////////////////////////////////////////////////////////////////////////////////////////////////

void initializeRobot()
{
  // Place code here to sinitialize servos to starting positions.
  // Sensors are automatically configured and setup by ROBOTC. They may need a brief time to stabilize.

  return;
}


/////////////////////////////////////////////////////////////////////////////////////////////////////
//
//                                         Main Task
//
// The following is the main code for the tele-op robot operation. Customize as appropriate for
// your specific robot.
//
// Game controller / joystick information is sent periodically (about every 50 milliseconds) from
// the FMS (Field Management System) to the robot. Most tele-op programs will follow the following
// logic:
//   1. Loop forever repeating the following actions:
//   2. Get the latest game controller / joystick settings that have been received from the PC.
//   3. Perform appropriate actions based on the joystick + buttons settings. This is usually a
//      simple action:
//      *  Joystick values are usually directly translated into power levels for a motor or
//         position of a servo.
//      *  Buttons are usually used to start/stop a motor or cause a servo to move to a specific
//         position.
//   4. Repeat the loop.
//
// Your program needs to continuously loop because you need to continuously respond to changes in
// the game controller settings.
//
// At the end of the tele-op period, the FMS will autonmatically abort (stop) execution of the program.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////

void Arcade(int x, int y) // make joystick arcade style controller
{
    int powY;
    int powX;
    int powRightMotor;
    int powLeftMotor;

    // convert joystick -128 to 127 range to -100 to 100 for powering motors
    powY = (y * 100) / 127;         // joystick y axis gives maximum power level
    powX = (x * 100) / 127;         // x axis determines which motor is reduced or
                                    // reversed for a turn

    if (powX < 0) //  if x negative, turning left; otherwise, turning right
      {
        powLeftMotor = (powY * (100 + (2 * powX))/100); // left motor reduced for right turn
        powRightMotor = powY;                           // right motor not changed
    }
    else
    {
        powRightMotor = (powY * (100 - (2 * powX))/100); // right motor reduced for left turn
        powLeftMotor = powY;                            // left motor not changed
    }

    motor[motorRight] = powRightMotor;
    motor[motorLeft]  = powLeftMotor;
}
task main()
{
  while (1==1)
  {

       getJoystickSettings(joystick);
       Arcade(joystick.joy1_x1, joystick.joy1_y1); //the joystick moves the robot in a ll directions

       if(joystick.joy1_y2<5 && joystick.joy1_y2> -5) // to make sure the robot isn't in the "dead zone"

     {
         motor[Forklift] = 0; // if it is in the "dead zone" the robot won't move or drift
       }
       else
       {
         motor[Forklift] = joystick.joy1_y2; // the robot moves as normal
       }
            if(joystick.joy2_y2<5 && joystick.joy2_y2> -5) // to make sure the robot isn't in the "dead zone"
     {
         motor[Collector] = 0; // if it is in the "dead zone" the robot won't move or drift
       }
       else
       {
         motor[Collector] = joystick.joy2_y2; // the robot moves as normal
       }
        if(joystick.joy2_y1<5 && joystick.joy2_y1> -5) // to make sure the robot isn't in the "dead zone"
     {
         motor[Hook] = 0; // if it is in the "dead zone" the robot won't move or drift
       }
       else
       {
         motor[Hook] = joystick.joy2_y1/20; // the robot moves as normal at 20 times less the speed
       }

 if(joystick.joy1_TopHat == 0) // when the TopHat is pushed in the up or 0 positional direction
 {
   servo[Door] = 110; // the servo motor moves to position 110 while the the TopHat is in the 0 positional direction

}

if(joystick.joy1_TopHat == -1) // when the TopHat isn't pushed at all and nothing is happening
{
	servo[Door] = 256; // the robot stays at 180 degrees at all times or 256 positional direction
}


  }
}
