#pragma config(Hubs,  S1, HTMotor,  HTServo,  none,     none)
#pragma config(Sensor, S2,     ,               sensorTouch)
#pragma config(Sensor, S3,     motor3,         sensorTouch)
#pragma config(Sensor, S4,     motor4,         sensorNone)
#pragma config(Motor,  motorB,          motorHook,     tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  mtr_S1_C1_1,     motor1,        tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C1_2,     motor2,        tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S1_C2_1,    servo1,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*--------------------------------------------------------------------------------------------------------*\
|*                                                                                                        *|
|*                                         - Moving  Forward -                                            *|
|*                                            ROBOTC on NXT                                               *|
|*                                                                                                        *|
|*  This program runs your robot forward for a designated amount of time.                                 *|
|*                                                                                                        *|
|*                                        ROBOT CONFIGURATION                                             *|
|*    NOTES:                                                                                              *|
|*    1)  To change the forward movement's speed, replace the two "100"'s with the desired speed number.  *|
|*    2)  To change the duration of the movement, replace the "4000" with the desired number of           *|
|*        milliseconds.                                                                                   *|
|*                                                                                                        *|
|*    MOTORS & SENSORS:                                                                                   *|
|*    [I/O Port]              [Name]              [Type]              [Description]                       *|
|*    Port C                  motorC              NXT                 Right motor                         *|
|*    Port B                  motorB              NXT                 Left motor                          *|
\*---------------------------------------------------------------------------------------------------4246-*/

task main()
{ //test code
   //motor[motor1] = -10;   // Motor C is run at a power level of 10 backwards.
   //motor[motor2] = -10;   // Motor B is run at a power level of 10 backwards
 while ((SensorValue[motor3] <= 0) || (SensorValue[motor4] <= 0))// while the sensor value is less than or equal to zero the following will happen
 {
ClearTimer(T1);//defining time

    while (time1[T1] < 5000)//while the time is less than 1 second the following will happen
    {
motor[motor1] = -5; //Motor 1 is run at a power of backwards of 5
motor[motor2] = -5; //Motor 2 is run at a power of backwards of 5
}
while (time1[T1] < 2000)//while time is less than 2 seconds the following happens 
{
motor[motor2] = -50;
motor[motor1] = 50;
}
motor[motor1] = -10;
motor[motor2] = -10;
}
}
while (time1[T1] < 2000)
{
motor[motor1] =  5;
motor[motor2] = 5;
}

while (time1{T1] < 3000)
	{
		motor[motor2]=-50;
		motor[motor1]=50;
	}
	
	while ((SensorValue[motor3] <= 0) || (SensorValue[motor4] <= 0))// while the sensor value is less than or equal to zero the following will happen
 {motor[motor1] = -5;
   motor[motor2] = -5;}
	
//   {

//			motor[motor1] = -5;// left motor goes forward at a power of 5
//			motor[motor2] = -5;// right motor goes forward at a power of 5
//			}
//			motor[motorHook]= -50;// motor goes down at a power of 50

//			wait1Msec(500); // waits before turning

			
//  {
//    motor[motor2] = -30;//right motor turns backwards
//    motor[motor1] = 30;//left motor turns forward
//    //this makes the motor turn right backwards
// }
// ClearTimer (T2);//defining second time

// while (time1[T2] < 6000) // This is the most accurate amount of time for the robot to return to the parking zone
//   {
//    motor[motor1] = 30;// left motor goes backwards
//    motor[motor2]= 30;//right motor goes backwards
//}


//}
////test code below

  // if (SensorValue [motor3] == 0)
//while(true)
//{
//	motor[motor1] = -20;
//motor[motor2] = -20;
//}
