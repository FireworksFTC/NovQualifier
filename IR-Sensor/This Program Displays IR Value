#pragma config(Hubs,  S1, HTMotor,  HTMotor,  none,     none)
#pragma config(Sensor, S2,     IR,             sensorHiTechnicIRSeeker1200)
#pragma config(Motor,  motorA,          ForkLift,      tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  mtr_S1_C1_1,     RightDrive,    tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C1_2,     LeftDrive,     tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_1,     motorF,        tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_2,     motorG,        tmotorTetrix, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#define forwardTime 500
#define backwardTime 1000
#define leftTime 1000
#define rightTime 1000

#define forwardPower 75
#define backwardPower 75
#define leftPower 75
#define rightPower 75

int globalPower;
int globalTime;


void goForward(int goPower, const int mTime){
	motor[RightDrive] = goPower;
	motor[LeftDrive] = -goPower;
	wait1Msec(mTime);
}

void goBack(int goPower, const int mTime) {
	motor[RightDrive] = -goPower;
	motor[LeftDrive] = goPower;
	wait1Msec(mTime);
}

void goLeft(int goPower, const int mTime) {
	motor[RightDrive] = goPower;
	motor[LeftDrive] = goPower;
	wait1Msec(mTime);
}

void goRight(int goPower, const int mTime) {
	motor[RightDrive] = -goPower;
	motor[LeftDrive] = -goPower;
	wait1Msec(mTime);
}

void goUp (int goPower, const int mTime) {
	motor[ForkLift] = goPower;
	wait1Msec(mTime);
}

void goDown (int goPower, const int mTime) {
	motor[ForkLift] = -goPower;
	wait1Msec(mTime);
}


void initializerobot ()
{
		globalPower = 75;
		globalTime = 1000;
		return;
}






int getIrReading(tSensors irReceiverPin)
{
  wait1Msec(1);
  int ir = SensorValue[irReceiverPin];
  wait1Msec(1);
  return ir;
}



task main()
{
	int IRvalue;
	while(true)
	{
		IRvalue = SensorValue[IR];
		nxtDisplayCenteredTextLine(1, "%d" ,IRvalue);
	}
}
